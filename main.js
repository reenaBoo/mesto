(()=>{"use strict";function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var e=function(){function e(t,n,r,o,i,a){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this._text=t.name,this._image=t.link,this._cardSelector=n,this.likes=t.likes,this.cardId=t._id,this._ownerId=t.owner._id,this._handleCardClick=r,this._userId=a,this._handleCardLike=o.bind(this),this._handleCardDelete=i}var n,r;return n=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardTitle=this._element.querySelector(".card__title"),this._cardButtonDelete=this._element.querySelector(".card__delete-button"),this._cardButtonLike=this._element.querySelector(".card__like-button"),this._likeCounter=this._element.querySelector(".card__like-counter"),this._setEventListeners(),this._checkCardOwner(),this._cardImage.src=this._image,this._cardImage.alt=this._text,this._cardTitle.textContent=this._text,this.handleToggleLike(),this.setCounter(this.likes.length),this._element}},{key:"_checkCardOwner",value:function(){this._ownerId!==this._userId&&this._cardButtonDelete.remove()}},{key:"setCounter",value:function(t){this._likeCounter.textContent=t}},{key:"_setEventListeners",value:function(){var t=this;this._cardButtonLike.addEventListener("click",(function(){t._handleCardLike()})),this._cardButtonDelete.addEventListener("click",(function(){t._handleCardDelete(t)})),this._cardImage.addEventListener("click",(function(){t._handleCardClick()}))}},{key:"handleToggleLike",value:function(){this.isLiked()?this._cardButtonLike.classList.add("card__like-button_active"):this._cardButtonLike.classList.remove("card__like-button_active")}},{key:"removeElement",value:function(){this._element.remove()}},{key:"isLiked",value:function(){var t=this;return this.likes.some((function(e){return e._id===t._userId}))}}])&&t(n.prototype,r),e}();function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var r=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n}(this,"changeButtonText",(function(t){r._submitButtonSelector.textContent=t})),this._inputSelector=e.inputSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=n,this._submitButtonSelector=this._form.querySelector(e.submitButtonSelector),this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector))}var e,r;return e=t,(r=[{key:"_showInputError",value:function(t){var e=this._form.querySelector(".".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t){var e=this._form.querySelector(".".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?(this._submitButtonSelector.classList.add(this._inactiveButtonClass),this._submitButtonSelector.setAttribute("disabled","true")):(this._submitButtonSelector.classList.remove(this._inactiveButtonClass),this._submitButtonSelector.removeAttribute("disabled"))}},{key:"_checkInputValidity",value:function(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(t){return!t.validity.valid}))}},{key:"_setEventListener",value:function(){var t=this;this._inputList.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._setEventListener()}},{key:"resetErrorText",value:function(){var t=this;this._inputList.forEach((function(e){t._hideInputError(e)})),this._toggleButtonState()}}])&&n(e.prototype,r),t}();function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=e,this._container=document.querySelector(n)}var e,n;return e=t,(n=[{key:"renderItems",value:function(t){var e=this;t.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}},{key:"addItemAppend",value:function(t){this._container.append(t)}}])&&o(e.prototype,n),t}();function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n}(this,"_handleEscClose",(function(t){"Escape"===t.key&&n.close()})),this._popup=document.querySelector(e)}var e,n;return e=t,(n=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add("popup_opened")}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove("popup_opened")}},{key:"setEventListeners",value:function(){var t=this;this._popup.addEventListener("mousedown",(function(e){e.target.classList.contains("popup")&&t.close(t._popup)})),this._popup.addEventListener("click",(function(e){e.target.classList.contains("popup__close-button")&&t.close(t._popup)}))}}])&&a(e.prototype,n),t}();function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function l(t,e,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=p(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function h(t,e){return!e||"object"!==u(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function p(t){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var _=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=p(r);if(o){var n=p(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return h(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t))._popupImage=e._popup.querySelector(".figure__image"),e._popupTitle=e._popup.querySelector(".figure__title"),e}return e=a,(n=[{key:"openImage",value:function(t,e){this._popupImage.src=e,this._popupImage.alt=t,this._popupTitle.textContent=t,l(p(a.prototype),"open",this).call(this)}}])&&s(e.prototype,n),a}(c);function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function v(t,e,n){return(v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=k(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function m(t,e){return(m=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function b(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function k(t){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var g=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&m(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=k(r);if(o){var n=k(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return b(this,t)});function a(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._form=n._popup.querySelector(".form"),n._confirmButton=n._form.querySelector(".form__save-button"),n._handleSubmit=e,n}return e=a,(n=[{key:"_getInputValues",value:function(){var t=this;return this._inputsList=this._form.querySelectorAll(".form__input"),this._data={},this._inputsList.forEach((function(e){t._data[e.name]=e.value})),this._data}},{key:"setEventListeners",value:function(){var t=this;v(k(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault();var n=t._getInputValues();t._handleSubmit(n)}))}},{key:"close",value:function(){this._form.reset(),v(k(a.prototype),"close",this).call(this)}}])&&y(e.prototype,n),a}(c);function S(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var w=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userName=e,this._userAbout=n,this._userAvatar=r,this._profileId=""}var e,n;return e=t,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,about:this._userAbout.textContent}}},{key:"setUserInfo",value:function(t,e,n){this._userName.textContent=t,this._userAbout.textContent=e,this._userId=n}},{key:"setUserAvatar",value:function(t){this._userAvatar.src=t}},{key:"getUserId",value:function(){return this._userId}}])&&S(e.prototype,n),t}();function E(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var C=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._cohort=e,this._url=n,this._token=r}var e,n;return e=t,(n=[{key:"_checkStatus",value:function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}},{key:"getInitialCards",value:function(){return fetch("".concat(this._url,"/").concat(this._cohort,"/cards"),{headers:{authorization:this._token}}).then(this._checkStatus)}},{key:"postNewCard",value:function(t,e){return fetch("".concat(this._url,"/").concat(this._cohort,"/cards"),{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:e})}).then(this._checkStatus)}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/").concat(this._cohort,"/users/me"),{headers:{authorization:this._token}}).then(this._checkStatus)}},{key:"editUserInfo",value:function(t,e){return fetch("".concat(this._url,"/").concat(this._cohort,"/users/me"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:e})}).then(this._checkStatus)}},{key:"editUserAvatar",value:function(t){return fetch("".concat(this._url,"/").concat(this._cohort,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then(this._checkStatus)}},{key:"likeCard",value:function(t){return fetch("".concat(this._url,"/").concat(this._cohort,"/cards/likes/").concat(t),{method:"PUT",headers:{authorization:this._token,"Content-Type":"application/json"}}).then(this._checkStatus)}},{key:"deleteLike",value:function(t){return fetch("".concat(this._url,"/").concat(this._cohort,"/cards/likes/").concat(t),{method:"DELETE",headers:{authorization:this._token,"Content-Type":"application/json"}}).then(this._checkStatus)}},{key:"deleteCard",value:function(t){return fetch("".concat(this._url,"/").concat(this._cohort,"/cards/").concat(t),{method:"DELETE",headers:{authorization:this._token,"Content-Type":"application/json"}}).then(this._checkStatus)}}])&&E(e.prototype,n),t}();function L(t){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function O(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function I(t,e,n){return(I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=P(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function j(t,e){return(j=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function T(t,e){return!e||"object"!==L(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function P(t){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var B=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&j(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=P(r);if(o){var n=P(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return T(this,t)});function a(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._form=n._popup.querySelector(".form"),n._handleSubmit=e,n}return e=a,(n=[{key:"setEventListeners",value:function(){var t=this;I(P(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault(),t._handleSubmit(t.card),t.close()}))}},{key:"close",value:function(){I(P(a.prototype),"close",this).call(this)}},{key:"open",value:function(t){I(P(a.prototype),"open",this).call(this),this.card=t}}])&&O(e.prototype,n),a}(c),x={inputSelector:".form__input",submitButtonSelector:".form__save-button",inactiveButtonClass:"form__save-button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},q=document.querySelector(".profile__name"),R=document.querySelector(".profile__description"),A=document.querySelector(".profile__avatar"),U=document.querySelector(".form_type_user"),D=document.querySelector(".form_type_card"),N=document.querySelector(".form_type_avatar"),z=document.querySelector(".profile__edit-button"),V=document.querySelector(".profile__add-button"),J=document.querySelector(".profile__avatar-overlay");function H(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var M=new C("cohort-26","https://nomoreparties.co/v1/","254abe0c-6cde-4d88-b5b9-683b939cbbc8"),$=new _(".popup_type_image");$.setEventListeners();var F=new w(q,R,A);function G(t){F.setUserInfo(t.name,t.about,t._id)}function K(t){F.setUserAvatar(t.avatar)}function Q(){var t=this;(this.isLiked()?M.deleteLike(this.cardId):M.likeCard(this.cardId)).then((function(e){t.likes=e.likes,t.handleToggleLike(),t.setCounter(e.likes.length)}))}function W(){X.open(this)}var X=new B(".popup_type_delete",(function(t){M.deleteCard(t.cardId).then((function(e){"Пост удалён"===e.message&&t.removeElement()})).catch((function(t){return console.log(t)}))}));X.setEventListeners();var Y=function(t){return function(t){var n=F.getUserId();return new e(t,".template-card",(function(){$.openImage(t.name,t.link)}),Q,W,n)}(t).generateCard()},Z=new i((function(t){Z.addItemAppend(Y(t))}),".cards");Promise.all([M.getUserInfo(),M.getInitialCards()]).then((function(t){var e,n,r=(n=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(e,n)||function(t,e){if(t){if("string"==typeof t)return H(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?H(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];G(o),K(o);var a=F.getUserInfo();F.getUserId(),Z.renderItems(i);var c=new g(".popup_type_new-card",(function(t){et.changeButtonText("Создание..."),M.postNewCard(t.name,t.link).then((function(t){Z.addItem(Y(t)),c.close(),et.changeButtonText("Создать")})).catch((function(t){return console.log(t)}))}));c.setEventListeners();var u=new g(".popup_type_edit",(function(t){tt.changeButtonText("Сохранение..."),M.editUserInfo(t.name,t.about).then((function(){G(t),u.close(),tt.changeButtonText("Сохранить")})).catch((function(t){return console.log(t)}))}));u.setEventListeners();var s=new g(".popup_type_avatar",(function(t){nt.changeButtonText("Сохранение..."),M.editUserAvatar(t.avatar).then((function(){K(t),s.close(),nt.changeButtonText("Сохранить")})).catch((function(t){return console.log(t)}))}));s.setEventListeners(),z.addEventListener("click",(function(){U.name.value=a.name,U.about.value=a.about,tt.resetErrorText(),u.open()})),V.addEventListener("click",(function(){et.resetErrorText(),c.open()})),J.addEventListener("click",(function(){nt.resetErrorText(),s.open()}))})).catch((function(t){console.log(t)}));var tt=new r(x,U),et=new r(x,D),nt=new r(x,N);tt.enableValidation(),et.enableValidation(),nt.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,